---
- name: Include domain configuration file
  include_vars:
    file: ../../../domain.yml
    name: domain
  tags: common

- name: Read credentials from domain configuration file
  set_fact:
    ansible_user: "{{ domain.initial_domain_admin.username }}"
    ansible_password: "{{ domain.initial_domain_admin.password }}"
  when: "packer is not defined"
  tags: common

- include_tasks: base.yml
  tags: base

- name: Ensure domain is available
  win_dsc:
    resource_name: xWaitForADDomain
    DomainName: "{{ domain.dns_name }}"
    RetryCount: 100
    RetryIntervalSec: 10
  when: packer is not defined # TODO

- name: Set a weak password policy
  win_command: powershell.exe -
  args:
    stdin: "Set-ADDefaultDomainPasswordPolicy -MinPasswordLength 1 -ComplexityEnabled $False -Identity {{ domain.dns_name }}"

- name: Set domain root path (e.g. DC=xtof,DC=lab)
  set_fact:
    # e.g. DC=xtof,DC=lab
    domain_root_path: DC={{ domain.dns_name.split('.') | join(',DC=') }}

- name: Ensure OUs exist
  win_dsc:
    resource_name: xADOrganizationalUnit
    Name: "{{ item.split(',')[0].split('=')[1] }}" # CN=xxx,.. => keep 'xxx'
    Path: "{{ item.split(',') | reject('search', item.split(',')[0]) | map('regex_replace', '(.+)', '\\1,') | join('') }}{{ domain_root_path }}"
    ProtectedFromAccidentalDeletion: no
  with_items: "{{ domain.organizational_units }}"

- name: Ensure domain groups exist
  win_domain_group:
    name: "{{ item.dn.split(',')[0].split('=')[1] }}"
    path: "{{ item.dn.split(',') | reject('search', item.dn.split(',')[0]) | map('regex_replace', '(.+)', '\\1,') | join('') }}{{ domain_root_path }}"
    scope: global
    state: present
  with_items: "{{ domain.groups }}"

- name: Ensure domain users exist
  win_domain_user:
    name: "{{ item.username }}"
    password: "{{ item.password | default(item.username) }}"
    path: "{{ item.OU | default('CN=Users') }},{{ domain_root_path }}"
    enabled: yes
  with_items: "{{ domain.users }}"

- name: Group memberships
  win_domain_group_membership:
    name: "{{ item.dn }},{{ domain_root_path }}"
    members: "{{ item.members }}"
  with_items: "{{ domain.groups }}"